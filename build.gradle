plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.30'
    id 'com.heroku.sdk.heroku-gradle' version '2.0.0'
    id "com.github.ben-manes.versions" version "0.39.0"
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'com.github.gmazzo.buildconfig' version '3.0.2'
}

repositories {
    maven { url = 'https://kotlin.bintray.com/ktor' }
    maven { url = 'https://kotlin.bintray.com/kotlinx' }
    maven { url = 'https://kotlin.bintray.com/kotlin-js-wrappers' }
    maven { url = "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/kotlin-js-wrappers" }
    maven { url = 'https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven' }
    maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

def mainName = 'ContentServer'
def appName = 'server'

// This is for ./gradlew run
//application {
//    mainClassName = mainName
//}

sourceCompatibility = 1.8
targetCompatibility = 1.8

description 'ReadingBat Site'
group 'com.github.readingbat'
version '1.2.0'

buildConfig {
    buildConfigField('String', 'SITE_NAME', "\"${project.name}\"")
    buildConfigField('String', 'SITE_VERSION', "\"${project.version}\"")
    buildConfigField('String', 'SITE_RELEASE_DATE', "\"7/16/21\"")
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    implementation "com.github.readingbat.readingbat-core:readingbat-core:$readingbat_version"

    implementation "com.github.pambrose.common-utils:core-utils:$utils_version"
    implementation "io.github.microutils:kotlin-logging:$logging_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "com.papertrailapp:logback-syslog4j:$papertrail_version"

    runtimeOnly "org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlin_version"

    testImplementation "com.github.readingbat.readingbat-core:readingbat-kotest:$readingbat_version"

    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation "io.ktor:ktor-server-test-host:$ktor_version"

    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-property:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-ktor:$kotest_ktor_version"

    testImplementation "org.junit.jupiter:junit-jupiter:$junit_version"
}

//sourceSets {
//    main.kotlin.srcDirs = main.java.srcDirs = ['src']
//    test.kotlin.srcDirs = test.java.srcDirs = ['test']
//    main.resources.srcDirs = ['resources']
//    test.resources.srcDirs = ['testresources']
//}

heroku {
    appName = "readingbat"
    jdkVersion = 11
    includes = ["build/libs/server.jar"]
    includeBuildDir = false
}

// Include build uberjars in heroku deploy
task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

shadowJar {
    zip64 true
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude "LICENSE*"
}

task uberjar(type: Jar, dependsOn: shadowJar) {
    zip64 true
    archiveFileName = 'server.jar'
    manifest {
        attributes('Implementation-Title': appName)
        attributes('Implementation-Version': version)
        attributes('Built-Date': new Date())
        attributes('Built-JDK': System.getProperty('java.version'))
        attributes('Main-Class': mainName)
    }
    from zipTree(shadowJar.archiveFile)
}

compileKotlin {
    kotlinOptions {
        useIR = true
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        useIR = true
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}